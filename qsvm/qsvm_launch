#!/usr/bin/env python

# Run script of the qsvm training.

import argparse
import json

from main import main


parser = argparse.ArgumentParser(formatter_class=argparse.
                                 ArgumentDefaultsHelpFormatter)
parser.add_argument("--sig_path", type=str, required=True,
                    help="Path to the signal/anomaly dataset (.h5 format).")
parser.add_argument("--bkg_path", type=str, required=True,
                    help="Path to the QCD background dataset (.h5 format).")
parser.add_argument("--test_bkg_path", type=str, required=True,
                    help="Path to the background testing dataset (.h5 format).")
parser.add_argument('--backend_name', type=str,
                    help='The IBM backend. Could be a simulator'
                    ', noise model, or a real quantum computer')
parser.add_argument('--run_type', type=str, required=True,
                    choices=['ideal', 'noisy', 'hardware'],
                    help='Choose way to run the QSVM: Ideal computation,'
                    'noisy simulation or on real quantum hardware.')
parser.add_argument('--output_folder', required=True,
                    help='The name of the model to be saved.')
parser.add_argument('--c_param', type=float, default=1.,
                    help='The C parameter of the SVM.')
parser.add_argument('--gamma',nargs="+", default='scale',
                    help='The gamma parameter of the SVM with rbf kernel.')
parser.add_argument('--ntrain', type=int, default=600,
                    help='Number of training events for the QSVM.')
parser.add_argument('--nvalid', type=int, default=0,
                    help='Number of validation events for the QSVM (typically)'
                         'not used for the QSVM).')
parser.add_argument('--ntest', type=int, default=720,
                    help='Number of test events for the QSVM.')
parser.add_argument('--kfolds', type=int, default=5,
                    help='Number of k-test folds used.')
parser.add_argument('--nqubit', type=int, default=8,
                    help='Number of qubits for quantum feature map circuit.') 

args = parser.parse_args()

# Load private configuration file for ibmq_api_token and provider details.   
with open('private_config_vasilis.json') as pconfig:
    private_configuration = json.load(pconfig)

# Different configuration keyword arguments for the QuantumInstance depending 
# on the run_type. They can be tweaked as desired before running.
initial_layout = [22,25,24,23,21,18,15,12] # for Cairo

seed = 12345
config_noisy = {'optimization_level':3, 'initial_layout': initial_layout,
                'seed_transpiler':seed, 'seed_simulator':seed, 'shots':5000}
config_hardware = {'optimization_level':3, 'initial_layout': initial_layout,
                   'seed_transpiler':seed, 'shots':5000}
config_ideal = {'seed_simulator': seed}

switcher = {'ideal' : lambda: config_ideal, 'noisy' : lambda: config_noisy, 
            'hardware' : lambda: config_hardware}
config = switcher.get(args.run_type, lambda: None)()

args = {
    "sig_path": args.sig_path,
    "bkg_path": args.bkg_path,
    "test_bkg_path": args.test_bkg_path,
    "c_param": args.c_param,
    "output_folder": args.output_folder,
    "gamma":args.gamma,
    "backend_name": args.backend_name,
    "ibmq_api_config": private_configuration["IBMQ"],
    "run_type": args.run_type,
    "config": config,
    "ntrain": args.ntrain,
    "nvalid": args.nvalid,
    "ntest": args.ntest,
    "nqubit": args.nqubit,
    "kfolds": args.kfolds,
    "seed": seed, # For the data shuffling.
}

main(args)
